procedure InitWindow(width, height: Integer; title: PChar); cdecl; external;
procedure CloseWindow(); cdecl; external;
function WindowShouldClose(): Boolean; cdecl; external;
function IsWindowReady(): Boolean; cdecl; external;
function IsWindowFullscreen(): Boolean; cdecl; external;
function IsWindowHidden(): Boolean; cdecl; external;
function IsWindowMinimized(): Boolean; cdecl; external;
function IsWindowMaximized(): Boolean; cdecl; external;
function IsWindowFocused(): Boolean; cdecl; external;
function IsWindowResized(): Boolean; cdecl; external;
function IsWindowState(flag: dWord): Boolean; cdecl; external;
procedure SetWindowState(flags: dWord); cdecl; external;
procedure ClearWindowState(flags: dWord); cdecl; external;
procedure ToggleFullscreen(); cdecl; external;
procedure ToggleBorderlessWindowed(); cdecl; external;
procedure MaximizeWindow(); cdecl; external;
procedure MinimizeWindow(); cdecl; external;
procedure RestoreWindow(); cdecl; external;
procedure SetWindowIcon(image: TImage); cdecl; external;
procedure SetWindowIcons(images: PTImage; count: Integer); cdecl; external;
procedure SetWindowTitle(title: PChar); cdecl; external;
procedure SetWindowPosition(x, y: Integer); cdecl; external;
procedure SetWindowMonitor(monitor: Integer); cdecl; external;
procedure SetWindowMinSize(width, height: Integer); cdecl; external;
procedure SetWindowMaxSize(width, height: Integer); cdecl; external;
procedure SetWindowSize(width, height: Integer); cdecl; external;
procedure SetWindowOpacity(opacity: Single); cdecl; external;
procedure SetWindowFocused(); cdecl; external;
function GetWindowHandle(): PByte; cdecl; external;
function GetScreenWidth(): Integer; cdecl; external;
function GetScreenHeight(): Integer; cdecl; external;
function GetRenderWidth(): Integer; cdecl; external;
function GetRenderHeight(): Integer; cdecl; external;
function GetMonitorCount(): Integer; cdecl; external;
function GetCurrentMonitor(): Integer; cdecl; external;
function GetMonitorPosition(monitor: Integer): TVector2; cdecl; external;
function GetMonitorWidth(monitor: Integer): Integer; cdecl; external;
function GetMonitorHeight(monitor: Integer): Integer; cdecl; external;
function GetMonitorPhysicalWidth(monitor: Integer): Integer; cdecl; external;
function GetMonitorPhysicalHeight(monitor: Integer): Integer; cdecl; external;
function GetMonitorRefreshRate(monitor: Integer): Integer; cdecl; external;
function GetWindowPosition(): TVector2; cdecl; external;
function GetWindowScaleDPI(): TVector2; cdecl; external;
function GetMonitorName(monitor: Integer): PChar; cdecl; external;
procedure SetClipboardText(text: PChar); cdecl; external;
function GetClipboardText(): PChar; cdecl; external;
function GetClipboardImage(): TImage; cdecl; external;
procedure EnableEventWaiting(); cdecl; external;
procedure DisableEventWaiting(); cdecl; external;

procedure ShowCursor(); cdecl; external;
procedure HideCursor(); cdecl; external;
function IsCursorHidden(): Boolean; cdecl; external;
procedure EnableCursor(); cdecl; external;
procedure DisableCursor(); cdecl; external;
function IsCursorOnScreen(): Boolean; cdecl; external;

procedure ClearBackground(color: TColor); cdecl; external;
procedure BeginDrawing(); cdecl; external;
procedure EndDrawing(); cdecl; external;
procedure BeginMode2D(camera: TCamera2D); cdecl; external;
procedure EndMode2D(); cdecl; external;
procedure BeginMode3D(camera: TCamera3D); cdecl; external;
procedure EndMode3D(); cdecl; external;
procedure BeginTextureMode(target: TRenderTexture2D); cdecl; external;
procedure EndTextureMode(); cdecl; external;
procedure BeginShaderMode(shader: TShader); cdecl; external;
procedure EndShaderMode(); cdecl; external;
procedure BeginBlendMode(mode: Integer); cdecl; external;
procedure EndBlendMode(); cdecl; external;
procedure BeginScissorMode(x, y, width, height: Integer); cdecl; external;
procedure EndScissorMode(); cdecl; external;
procedure BeginVrStereoMode(config: TVrStereoConfig); cdecl; external;
procedure EndVrStereoMode(); cdecl; external;

function LoadVrStereoConfig(device: TVrDeviceInfo): TVrStereoConfig; cdecl; external;
procedure UnloadVrStereoConfig(config: TVrStereoConfig); cdecl; external;

function LoadShader(vsFileName, fsFileName: PChar): TShader; cdecl; external;
function LoadShaderFromMemory(vsCode, fsCode: PChar): TShader; cdecl; external;
function IsShaderValid(shader: TShader): Boolean; cdecl; external;
function GetShaderLocation(shader: TShader; uniformName: PChar): Integer; cdecl; external;
function GetShaderLocationAttrib(shader: TShader; attribName: PChar): Integer; cdecl; external;
procedure SetShaderValue(shader: TShader; locIndex: Integer; value: PByte; uniformType: Integer); cdecl; external;
procedure SetShaderValueV(shader: TShader; locIndex: Integer; value: PByte; uniformType, count: Integer); cdecl; external;
procedure SetShaderValueMatrix(shader: TShader; locIndex: Integer; mat: TMatrix); cdecl; external;
procedure SetShaderValueTexture(shader: TShader; locIndex: Integer; texture: TTexture2D); cdecl; external;
procedure UnloadShader(shader: TShader); cdecl; external;

function GetScreenToWorldRay(position: TVector2; camera: TCamera): TRay; cdecl; external;
function GetScreenToWorldRayEx(position: TVector2; camera: TCamera; width, height: Integer): TRay; cdecl; external;
function GetWorldToScreen(position: TVector3; camera: TCamera): TVector2; cdecl; external;
function GetWorldToScreenEx(position: TVector3; camera: TCamera; width, height: Integer): TVector2; cdecl; external;
function GetWorldToScreen2D(position: TVector2; camera: TCamera2D): TVector2; cdecl; external;
function GetScreenToWorld2D(position: TVector2; camera: TCamera2D): TVector2; cdecl; external;
function GetCameraMatrix(camera: TCamera): TMatrix; cdecl; external;
function GetCameraMatrix2D(camera: TCamera2D): TMatrix; cdecl; external;

procedure SetTargetFPS(fps: Integer); cdecl; external;
function GetFrameTime(): Single; cdecl; external;
function GetTime(): Double; cdecl; external;
function GetFPS(): Integer; cdecl; external;

procedure SwapScreenBuffer(); cdecl; external;
procedure PollInputEvents(); cdecl; external;
procedure WaitTime(seconds: Double); cdecl; external;

procedure SetRandomSeed(seed: dWord); cdecl; external;
function GetRandomValue(min, max: Integer): Integer; cdecl; external;
function LoadRandomSequence(count: dWord; min, max: Integer): PInt; cdecl; external;
procedure UnloadRandomSequence(sequence: PInt); cdecl; external;

procedure TakeScreenshot(fileName: PChar); cdecl; external;
procedure SetConfigFlags(flags: dWord); cdecl; external;
procedure OpenURL(url: PChar); cdecl; external;

function MemAlloc(size: dWord): PByte; cdecl; external;
function MemRealloc(ptr: PByte; size: dWord): PByte; cdecl; external;
procedure MemFree(ptr: PByte); cdecl; external;

procedure TraceLog(logLevel: Integer; text: PChar); cdecl; varargs; external;
procedure SetTraceLogCallback(callback: TTraceLogCallback); cdecl; external;
procedure SetLoadFileDataCallback(callback: TLoadFileDataCallback); cdecl; external;
procedure SetSaveFileDataCallback(callback: TSaveFileDataCallback); cdecl; external;
procedure SetLoadFileTextCallback(callback: TLoadFileTextCallback); cdecl; external;
procedure SetSaveFileTextCallback(callback: TSaveFileTextCallback); cdecl; external;

function LoadFileData(fileName: PChar; dataSize: PInt): PByte; cdecl; external;
procedure UnloadFileData(data: PByte); cdecl; external;
function SaveFileData(fileName: PChar; data: PByte; dataSize: Integer): Boolean; cdecl; external;
function ExportDataAsCode(data: PByte; dataSize: Integer; fileName: PChar): Boolean; cdecl; external;
function LoadFileText(fileName: PChar): PChar; cdecl; external;
procedure UnloadFileText(text: PChar); cdecl; external;
function SaveFileText(fileName: PChar; text: PChar): Boolean; cdecl; external;

function FileExists(fileName: PChar): Boolean; cdecl; external;
function DirectoryExists(dirPath: PChar): Boolean; cdecl; external;
function IsFileExtension(fileName, ext: PChar): Boolean; cdecl; external;
function GetFileLength(fileName: PChar): Integer; cdecl; external;
function GetFileExtension(fileName: PChar): PChar; cdecl; external;
function GetFileName(filePath: PChar): PChar; cdecl; external;
function GetFileNameWithoutExt(filePath: PChar): PChar; cdecl; external;
function GetDirectoryPath(filePath: PChar): PChar; cdecl; external;
function GetPrevDirectoryPath(dirPath: PChar): PChar; cdecl; external;
function GetWorkingDirectory(): PChar; cdecl; external;
function GetApplicationDirectory(): PChar; cdecl; external;
function MakeDirectory(dirPath: PChar): Integer; cdecl; external;
function ChangeDirectory(dir: PChar): Boolean; cdecl; external;
function IsPathFile(path: PChar): Boolean; cdecl; external;
function IsFileNameValid(fileName: PChar): Boolean; cdecl; external;
function LoadDirectoryFiles(dirPath: PChar): TFilePathList; cdecl; external;
function LoadDirectoryFilesEx(basePath, filter: PChar; scanSubdirs: Boolean): TFilePathList; cdecl; external;
procedure UnloadDirectoryFiles(files: TFilePathList); cdecl; external;
function IsFileDropped(): Boolean; cdecl; external;
function LoadDroppedFiles(): TFilePathList; cdecl; external;
procedure UnloadDroppedFiles(files: TFilePathList); cdecl; external;
function GetFileModTime(fileName: PChar): Integer; cdecl; external;

function CompressData(data: PByte; dataSize: Integer; compDataSize: PInt): PByte; cdecl; external;
function DecompressData(compData: PByte; compDataSize: Integer; dataSize: PInt): PByte; cdecl; external;
function EncodeDataBase64(data: PByte; dataSize: Integer; outputSize: PInt): PChar; cdecl; external;
function DecodeDataBase64(data: PByte; outputSize: PInt): PByte; cdecl; external;
function ComputeCRC32(data: PByte; dataSize: Integer): dWord; cdecl; external;
function ComputeMD5(data: PByte; dataSize: Integer): PdWord; cdecl; external;
function ComputeSHA1(data: PByte; dataSize: Integer): PdWord; cdecl; external;

function LoadAutomationEventList(fileName: PChar): TAutomationEventList; cdecl; external;
procedure UnloadAutomationEventList(list: TAutomationEventList); cdecl; external;
function ExportAutomationEventList(list: TAutomationEventList; fileName: PChar): Boolean; cdecl; external;
procedure SetAutomationEventList(list: PTAutomationEventList); cdecl; external;
procedure SetAutomationEventBaseFrame(frame: Integer); cdecl; external;
procedure StartAutomationEventRecording(); cdecl; external;
procedure StopAutomationEventRecording(); cdecl; external;
procedure PlayAutomationEvent(event: TAutomationEvent); cdecl; external;

function IsKeyPressed(key: Integer): Boolean; cdecl; external;
function IsKeyPressedRepeat(key: Integer): Boolean; cdecl; external;
function IsKeyDown(key: Integer): Boolean; cdecl; external;
function IsKeyReleased(key: Integer): Boolean; cdecl; external;
function IsKeyUp(key: Integer): Boolean; cdecl; external;
function GetKeyPressed(): Integer; cdecl; external;
function GetCharPressed(): Integer; cdecl; external;
procedure SetExitKey(key: Integer); cdecl; external;

function IsGamepadAvailable(gamepad: Integer): Boolean; cdecl; external;
function GetGamepadName(gamepad: Integer): PChar; cdecl; external;
function IsGamepadButtonPressed(gamepad, button: Integer): Boolean; cdecl; external;
function IsGamepadButtonDown(gamepad, button: Integer): Boolean; cdecl; external;
function IsGamepadButtonReleased(gamepad, button: Integer): Boolean; cdecl; external;
function IsGamepadButtonUp(gamepad, button: Integer): Boolean; cdecl; external;
function GetGamepadButtonPressed(): Integer; cdecl; external;
function GetGamepadAxisCount(gamepad: Integer): Integer; cdecl; external;
function GetGamepadAxisMovement(gamepad, axis: Integer): Single; cdecl; external;
function SetGamepadMappings(mappings: PChar): Integer; cdecl; external;
procedure SetGamepadVibration(gamepad: Integer; leftMotor, rightMotor, duration: Single); cdecl; external;

function IsMouseButtonPressed(button: Integer): Boolean; cdecl; external;
function IsMouseButtonDown(button: Integer): Boolean; cdecl; external;
function IsMouseButtonReleased(button: Integer): Boolean; cdecl; external;
function IsMouseButtonUp(button: Integer): Boolean; cdecl; external;
function GetMouseX(): Integer; cdecl; external;
function GetMouseY(): Integer; cdecl; external;
function GetMousePosition(): TVector2; cdecl; external;
function GetMouseDelta(): TVector2; cdecl; external;
procedure SetMousePosition(x, y: Integer); cdecl; external;
procedure SetMouseOffset(offsetX, offsetY: Integer); cdecl; external;
procedure SetMouseScale(scaleX, scaleY: Single); cdecl; external;
function GetMouseWheelMove(): Single; cdecl; external;
function GetMouseWheelMoveV(): TVector2; cdecl; external;
procedure SetMouseCursor(cursor: Integer); cdecl; external;

function GetTouchX(): Integer; cdecl; external;
function GetTouchY(): Integer; cdecl; external;
function GetTouchPosition(index: Integer): TVector2; cdecl; external;
function GetTouchPointId(index: Integer): Integer; cdecl; external;
function GetTouchPointCount(): Integer; cdecl; external;

procedure SetGesturesEnabled(flags: dWord); cdecl; external;
function IsGestureDetected(gesture: dWord): Boolean; cdecl; external;
function GetGestureDetected(): Integer; cdecl; external;
function GetGestureHoldDuration(): Single; cdecl; external;
function GetGestureDragVector(): TVector2; cdecl; external;
function GetGestureDragAngle(): Single; cdecl; external;
function GetGesturePinchVector(): TVector2; cdecl; external;
function GetGesturePinchAngle(): Single; cdecl; external;

procedure UpdateCamera(camera: PTCamera; mode: Integer); cdecl; external;
procedure UpdateCameraPro(camera: PTCamera; movement, rotation: TVector3; zoom: Single); cdecl; external;