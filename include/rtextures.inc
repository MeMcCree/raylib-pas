function LoadImage(fileName: PChar): TImage; cdecl; external;
function LoadImageRaw(fileName: PChar; width, height, format, headerSize: Integer): TImage; cdecl; external;
function LoadImageAnim(fileName: PChar; frames: PInt): TImage; cdecl; external;
function LoadImageAnimFromMemory(fileType: PChar; fileData: PByte; dataSize: Integer; frames: PInt): TImage; cdecl; external;
function LoadImageFromMemory(fileType: PChar; fileData: PByte; dataSize: Integer): TImage; cdecl; external;
function LoadImageFromTexture(texture: TTexture2D): TImage; cdecl; external;
function LoadImageFromScreen(): TImage; cdecl; external;
function IsImageValid(image: TImage): Boolean; cdecl; external;
procedure UnloadImage(image: TImage); cdecl; external;
function ExportImage(image: TImage; fileName: PChar): Boolean; cdecl; external;
function ExportImageToMemory(image: TImage; fileType: PChar; fileSize: PInt): PByte; cdecl; external;
function ExportImageAsCode(image: TImage; fileName: PChar): Boolean; cdecl; external;

function GenImageColor(width, height: Integer; color: TColor): TImage; cdecl; external;
function GenImageGradientLinear(width, height, direction: Integer; startc, endc: TColor): TImage; cdecl; external;
function GenImageGradientRadial(width, height: Integer; density: Single; inner, outer: TColor): TImage; cdecl; external;
function GenImageGradientSquare(width, height: Integer; density: Single; inner, outer: TColor): TImage; cdecl; external;
function GenImageChecked(width, height, checksX, checksY: Integer; col1, col2: TColor): TImage; cdecl; external;
function GenImageWhiteNoise(width, height: Integer; factor: Single): TImage; cdecl; external;
function GenImagePerlinNoise(width, height, offsetX, offsetY: Integer; scale: Single): TImage; cdecl; external;
function GenImageCellular(width, height, tileSize: Integer): TImage; cdecl; external;
function GenImageText(width, height: Integer; text: PChar): TImage; cdecl; external;

function ImageCopy(image: TImage): TImage; cdecl; external;
function ImageFromImage(image: TImage; rec: TRectangle): TImage; cdecl; external;
function ImageFromChannel(image: TImage; selectedChannel: Integer): TImage; cdecl; external;
function ImageText(text: PChar; fontSize: Integer; color: TColor): TImage; cdecl; external;
function ImageTextEx(font: TFont; text: PChar; fontSize, spacing: Single; tint: TColor): TImage; cdecl; external;
procedure ImageFormat(image: PTImage; newFormat: Integer); cdecl; external;
procedure ImageToPOT(image: PTImage; fill: TColor); cdecl; external;
procedure ImageCrop(image: PTImage; crop: TRectangle); cdecl; external;
procedure ImageAlphaCrop(image: PTImage; threshold: Single); cdecl; external;
procedure ImageAlphaClear(image: PTImage; color: TColor; threshold: Single); cdecl; external;
procedure ImageAlphaMask(image: PTImage; alphaMask: TImage); cdecl; external;
procedure ImageAlphaPremultiply(image: PTImage); cdecl; external;
procedure ImageBlurGaussian(image: PTImage; blurSize: Integer); cdecl; external;
procedure ImageKernelConvolution(image: PTImage; kernel: PSingle; kernelSize: Integer); cdecl; external;
procedure ImageResize(image: PTImage; newWidth, newHeight: Integer); cdecl; external;
procedure ImageResizeNN(image: PTImage; newWidth, newHeight: Integer); cdecl; external;
procedure ImageResizeCanvas(image: PTImage; newWidth, newHeight, offsetX, offsetY: Integer; fill: TColor); cdecl; external;
procedure ImageMipmaps(image: PTImage); cdecl; external;
procedure ImageDither(image: PTImage; rBpp, gBpp, bBpp, aBpp: Integer); cdecl; external;
procedure ImageFlipVertical(image: PTImage); cdecl; external;
procedure ImageFlipHorizontal(image: PTImage); cdecl; external;
procedure ImageRotate(image: PTImage; degrees: Integer); cdecl; external;
procedure ImageRotateCW(image: PTImage); cdecl; external;
procedure ImageRotateCCW(image: PTImage); cdecl; external;
procedure ImageColorTint(image: PTImage; color: TColor); cdecl; external;
procedure ImageColorInvert(image: PTImage); cdecl; external;
procedure ImageColorGrayscale(image: PTImage); cdecl; external;
procedure ImageColorContrast(image: PTImage; contrast: Single); cdecl; external;
procedure ImageColorBrightness(image: PTImage; brightness: Integer); cdecl; external;
procedure ImageColorReplace(image: PTImage; color, replace: TColor); cdecl; external;
function LoadImageColors(image: TImage): PTColor; cdecl; external;
function LoadImagePalette(image: TImage; maxPaletteSize: Integer; colorCount: PInt): PTColor; cdecl; external;
procedure UnloadImageColors(colors: PTColor); cdecl; external;
procedure UnloadImagePalette(colors: PTColor); cdecl; external;
function GetImageAlphaBorder(image: TImage; threshold: Single): TRectangle; cdecl; external;
function GetImageColor(image: TImage; x, y: Integer): TColor; cdecl; external;


procedure ImageClearBackground(dst: PTImage; color: TColor); cdecl; external;
procedure ImageDrawPixel(dst: PTImage; posX, posY: Integer; color: TColor); cdecl; external;
procedure ImageDrawPixelV(dst: PTImage; position: TVector2; color: TColor); cdecl; external;
procedure ImageDrawLine(dst: PTImage; startPosX, startPosY, endPosX, endPosY: Integer; color: TColor); cdecl; external;
procedure ImageDrawLineV(dst: PTImage; start, endp: TVector2; color: TColor); cdecl; external;
procedure ImageDrawLineEx(dst: PTImage; start, endp: TVector2; thick: Integer; color: TColor); cdecl; external;
procedure ImageDrawCircle(dst: PTImage; centerX, centerY, radius: Integer; color: TColor); cdecl; external;
procedure ImageDrawCircleV(dst: PTImage; center: TVector2; radius: Integer; color: TColor); cdecl; external;
procedure ImageDrawCircleLines(dst: PTImage; centerX, centerY, radius: Integer; color: TColor); cdecl; external;
procedure ImageDrawCircleLinesV(dst: PTImage; center: TVector2; radius: Integer; color: TColor); cdecl; external;
procedure ImageDrawRectangle(dst: PTImage; posX, posY, width, height: Integer; color: TColor); cdecl; external;
procedure ImageDrawRectangleV(dst: PTImage; position, size: TVector2; color: TColor); cdecl; external;
procedure ImageDrawRectangleRec(dst: PTImage; rec: TRectangle; color: TColor); cdecl; external;
procedure ImageDrawRectangleLines(dst: PTImage; rec: TRectangle; thick: Integer; color: TColor); cdecl; external;
procedure ImageDrawTriangle(dst: PTImage; v1, v2, v3: TVector2; color: TColor); cdecl; external;
procedure ImageDrawTriangleEx(dst: PTImage; v1, v2, v3: TVector2; c1, c2, c3: TColor); cdecl; external;
procedure ImageDrawTriangleLines(dst: PTImage; v1, v2, v3: TVector2; color: TColor); cdecl; external;
procedure ImageDrawTriangleFan(dst: PTImage; points: PTVector2; pointCount: Integer; color: TColor); cdecl; external;
procedure ImageDrawTriangleStrip(dst: PTImage; points: PTVector2; pointCount: Integer; color: TColor); cdecl; external;
procedure ImageDraw(dst: PTImage; src: TImage; srcRec, dstRec: TRectangle; tint: TColor); cdecl; external;
procedure ImageDrawText(dst: PTImage; text: PChar; posX, posY, fontSize: Integer; color: TColor); cdecl; external;
procedure ImageDrawTextEx(dst: PTImage; font: TFont; text: PChar; position: TVector2; fontSize, spacing: Single; tint: TColor); cdecl; external;

function LoadTexture(fileName: PChar): TTexture2D; cdecl; external;
function LoadTextureFromImage(image: TImage): TTexture2D; cdecl; external;
function LoadTextureCubemap(image: TImage; layout: Integer): TTextureCubemap; cdecl; external;
function LoadRenderTexture(width, height: Integer): TRenderTexture2D; cdecl; external;
function IsTextureValid(texture: TTexture2D): Boolean; cdecl; external;
procedure UnloadTexture(texture: TTexture2D); cdecl; external;
function IsRenderTextureValid(target: TRenderTexture2D): Boolean; cdecl; external;
procedure UnloadRenderTexture(target: TRenderTexture2D); cdecl; external;
procedure UpdateTexture(texture: TTexture2D; pixels: PByte); cdecl; external;
procedure UpdateTextureRec(texture: TTexture2D; rec: TRectangle; pixels: PByte); cdecl; external;

procedure GenTextureMipmaps(texture: PTTexture2D); cdecl; external;
procedure SetTextureFilter(texture: TTexture2D; filter: Integer); cdecl; external;
procedure SetTextureWrap(texture: TTexture2D; wrap: Integer); cdecl; external;

procedure DrawTexture(texture: TTexture2D; posX, posY: Integer; tint: TColor); cdecl; external;
procedure DrawTextureV(texture: TTexture2D; position: TVector2; tint: TColor); cdecl; external;
procedure DrawTextureEx(texture: TTexture2D; position: TVector2; rotation, scale: Single; tint: TColor); cdecl; external;
procedure DrawTextureRec(texture: TTexture2D; source: TRectangle; position: TVector2; tint: TColor); cdecl; external;
procedure DrawTexturePro(texture: TTexture2D; source, dest: TRectangle; origin: TVector2; rotation: Single; tint: TColor); cdecl; external;
procedure DrawTextureNPatch(texture: TTexture2D; nPatchInfo: TNPatchInfo; dest: TRectangle; origin: TVector2; rotation: Single; tint: TColor); cdecl; external;

function ColorIsEqual(col1, col2: TColor): Boolean; cdecl; external;
function Fade(color: TColor; alpha: Single): TColor; cdecl; external;
function ColorToInt(color: TColor): Integer; cdecl; external;
function ColorNormalize(color: TColor): TVector4; cdecl; external;
function ColorFromNormalized(normalized: TVector4): TColor; cdecl; external;
function ColorToHSV(color: TColor): TVector3; cdecl; external;
function ColorFromHSV(hue, saturation, value: Single): TColor; cdecl; external;
function ColorTint(color, tint: TColor): TColor; cdecl; external;
function ColorBrightness(color: TColor; factor: Single): TColor; cdecl; external;
function ColorContrast(color: TColor; contrast: Single): TColor; cdecl; external;
function ColorAlpha(color: TColor; alpha: Single): TColor; cdecl; external;
function ColorAlphaBlend(dst, src, tint: TColor): TColor; cdecl; external;
function ColorLerp(color1, color2: TColor; factor: Single): TColor; cdecl; external;
function GetColor(hexValue: dWord): TColor; cdecl; external;
function GetPixelColor(srcPtr: PByte; format: Integer): TColor; cdecl; external;
procedure SetPixelColor(dstPtr: PByte; color: TColor; format: Integer); cdecl; external;
function GetPixelDataSize(width, height, format: Integer): Integer; cdecl; external;
