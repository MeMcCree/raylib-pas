procedure SetShapesTexture(texture: TTexture2D; source: TRectangle); cdecl; external;
function GetShapesTexture(): TTexture2D; cdecl; external;
function GetShapesTextureRectangle(): TRectangle; cdecl; external;

procedure DrawPixel(posX, posY: Integer; color: TColor); cdecl; external;
procedure DrawPixelV(position: TVector2; color: TColor); cdecl; external;
procedure DrawLine(startPosX, startPosY, endPosX, endPosY: Integer; color: TColor); cdecl; external;
procedure DrawLineV(startPos, endPos: TVector2; color: TColor); cdecl; external;
procedure DrawLineEx(startPos, endPos: TVector2; thick: Single; color: TColor); cdecl; external;
procedure DrawLineStrip(points: PTVector2; pointCount: Integer; color: TColor); cdecl; external;
procedure DrawLineBezier(startPos, endPos: TVector2; thick: Single; color: TColor); cdecl; external;
procedure DrawCircle(centerX, centerY: Integer; radius: Single; color: TColor); cdecl; external;
procedure DrawCircleSector(center: TVector2; radius, startAngle, endAngle: Single; segments: Integer; color: TColor); cdecl; external;
procedure DrawCircleSectorLines(center: TVector2; radius, startAngle, endAngle: Single; segments: Integer; color: TColor); cdecl; external;
procedure DrawCircleGradient(centerX, centerY: Integer; radius: Single; inner, outer: TColor); cdecl; external;
procedure DrawCircleV(center: TVector2; radius: Single; color: TColor); cdecl; external;
procedure DrawCircleLines(centerX, centerY: Integer; radius: Single; color: TColor); cdecl; external;
procedure DrawCircleLinesV(center: TVector2; radius: Single; color: TColor); cdecl; external;
procedure DrawEllipse(centerX, centerY: Integer; radiusH, radiusV: Single; color: TColor); cdecl; external;
procedure DrawEllipseLines(centerX, centerY: Integer; radiusH, radiusV: Single; color: TColor); cdecl; external;
procedure DrawRing(center: TVector2; innerRadius, outerRadius, startAngle, endAngle: Single; segments: Integer; color: TColor); cdecl; external;
procedure DrawRingLines(center: TVector2; innerRadius, outerRadius, startAngle, endAngle: Single; segments: Integer; color: TColor); cdecl; external;
procedure DrawRectangle(posX, posY, width, height: Integer; color: TColor); cdecl; external;
procedure DrawRectangleV(position, size: TVector2; color: TColor); cdecl; external;
procedure DrawRectangleRec(rec: TRectangle; color: TColor); cdecl; external;
procedure DrawRectanglePro(rec: TRectangle; origin: TVector2; rotation: Single; color: TColor); cdecl; external;
procedure DrawRectangleGradientV(posX, posY, width, height: Integer; top, bottom: TColor); cdecl; external;
procedure DrawRectangleGradientH(posX, posY, width, height: Integer; left, right: TColor); cdecl; external;
procedure DrawRectangleGradientEx(rec: TRectangle; topLeft, bottomLeft, topRight, bottomRight: TColor); cdecl; external;
procedure DrawRectangleLines(posX, posY, width, height: Integer; color: TColor); cdecl; external;
procedure DrawRectangleLinesEx(rec: TRectangle; lineThick: Single; color: TColor); cdecl; external;
procedure DrawRectangleRounded(rec: TRectangle; roundness: Single; segments: Integer; color: TColor); cdecl; external;
procedure DrawRectangleRoundedLines(rec: TRectangle; roundness: Single; segments: Integer; color: TColor); cdecl; external;
procedure DrawRectangleRoundedLinesEx(rec: TRectangle; roundness: Single; segments: Integer; lineThick: Single; color: TColor); cdecl; external;
procedure DrawTriangle(v1, v2, v3: TVector2; color: TColor); cdecl; external;
procedure DrawTriangleLines(v1, v2, v3: TVector2; color: TColor); cdecl; external;
procedure DrawTriangleFan(points: PTVector2; pointCount: Integer; color: TColor); cdecl; external;
procedure DrawTriangleStrip(points: PTVector2; pointCount: Integer; color: TColor); cdecl; external;
procedure DrawPoly(center: TVector2; sides: Integer; radius, rotation: Single; color: TColor); cdecl; external;
procedure DrawPolyLines(center: TVector2; sides: Integer; radius, rotation: Single; color: TColor); cdecl; external;
procedure DrawPolyLinesEx(center: TVector2; sides: Integer; radius, rotation, lineThick: Single; color: TColor); cdecl; external;

procedure DrawSplineLinear(points: PTVector2; pointCount: Integer; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineBasis(points: PTVector2; pointCount: Integer; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineCatmullRom(points: PTVector2; pointCount: Integer; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineBezierQuadratic(points: PTVector2; pointCount: Integer; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineBezierCubic(points: PTVector2; pointCount: Integer; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineSegmentLinear(p1, p2: TVector2; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineSegmentBasis(p1, p2, p3, p4: TVector2; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineSegmentCatmullRom(p1, p2, p3, p4: TVector2; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineSegmentBezierQuadratic(p1, c2, p3: TVector2; thick: Single; color: TColor); cdecl; external;
procedure DrawSplineSegmentBezierCubic(p1, c2, c3, p4: TVector2; thick: Single; color: TColor); cdecl; external;

function GetSplinePointLinear(startPos, endPos: TVector2; t: Single): TVector2; cdecl; external;
function GetSplinePointBasis(p1, p2, p3, p4: TVector2; t: Single): TVector2; cdecl; external;
function GetSplinePointCatmullRom(p1, p2, p3, p4: TVector2; t: Single): TVector2; cdecl; external;
function GetSplinePointBezierQuad(p1, c2, p3: TVector2; t: Single): TVector2; cdecl; external;
function GetSplinePointBezierCubic(p1, c2, c3, p4: TVector2; t: Single): TVector2; cdecl; external;

function CheckCollisionRecs(rec1, rec2: TRectangle): Boolean; cdecl; external;
function CheckCollisionCircles(center1: TVector2; radius1: Single; center2: TVector2; radius2: Single): Boolean; cdecl; external;
function CheckCollisionCircleRec(center: TVector2; radius: Single; rec: TRectangle): Boolean; cdecl; external;
function CheckCollisionCircleLine(center: TVector2; radius: Single; p1, p2: TVector2): Boolean; cdecl; external;
function CheckCollisionPointRec(point: TVector2; rec: TRectangle): Boolean; cdecl; external;
function CheckCollisionPointCircle(point, center: TVector2; radius: Single): Boolean; cdecl; external;
function CheckCollisionPointTriangle(point, p1, p2, p3: TVector2): Boolean; cdecl; external;
function CheckCollisionPointLine(point, p1, p2: TVector2; threshold: Integer): Boolean; cdecl; external;
function CheckCollisionPointPoly(point: TVector2; points: PTVector2; pointCount: Integer): Boolean; cdecl; external;
function CheckCollisionLines(startPos1, endPos1, startPos2, endPos2: TVector2; collisionPoint: PTVector2): Boolean; cdecl; external;
function GetCollisionRec(rec1, rec2: TRectangle): TRectangle; cdecl; external;
